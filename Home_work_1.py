#!/usr/bin/env python
# coding: utf-8

# # Тема “Вычисления с помощью Numpy”

# ### Задание 1

# Импортируйте библиотеку Numpy и дайте ей псевдоним np.
# Создайте массив Numpy под названием a размером 5x2, то есть состоящий из 5 строк и 2 столбцов. Первый столбец должен содержать числа 1, 2, 3, 3, 1, а второй - числа 6, 8, 11, 10, 7. Будем считать, что каждый столбец - это признак, а строка - наблюдение. Затем найдите среднее значение по каждому признаку, используя метод mean массива Numpy. Результат запишите в массив mean_a, в нем должно быть 2 элемента.

# In[30]:


import numpy as np


# In[31]:


a1 = np.array([1, 2, 3, 3, 1]).reshape(5,1)
a2 = np.array([6, 8, 11, 10, 7]).reshape(5,1)
a = np.concatenate((a1, a2), axis=1)
print(a)


# In[32]:


print("Средние значения столбцов: {}".format(a.mean(axis=0)))


# In[33]:


mean_a = a.mean(axis=0)
print(mean_a)


# ### Задание 2

# Вычислите массив a_centered, отняв от значений массива “а” средние значения соответствующих признаков, содержащиеся в массиве mean_a. Вычисление должно производиться в одно действие. Получившийся массив должен иметь размер 5x2.

# In[34]:


a_centered = a - mean_a
print(a_centered)


# ### Задание 3
# 

# Найдите скалярное произведение столбцов массива a_centered. В результате должна получиться величина a_centered_sp. Затем поделите a_centered_sp на N-1, где N - число наблюдений.

# In[26]:


col1 = a_centered[:, 0]
col2 = a_centered[:, 1]
print(col1)
print(col2)


# In[27]:


a_centered_sp = np.dot(col1, col2)
print(a_centered_sp)


# In[28]:


a_centered_sp/(a.size-1)


# ### Задание 4**

# Число, которое мы получили в конце задания 3 является ковариацией двух признаков, содержащихся в массиве “а”. В задании 4 мы делили сумму произведений центрированных признаков на N-1, а не на N, поэтому полученная нами величина является несмещенной оценкой ковариации.
# В этом задании проверьте получившееся число, вычислив ковариацию еще одним способом - с помощью функции np.cov. В качестве аргумента m функция np.cov должна принимать транспонированный массив “a”. В получившейся ковариационной матрице (массив Numpy размером 2x2) искомое значение ковариации будет равно элементу в строке с индексом 0 и столбце с индексом 1.

# In[29]:


m = np.transpose(a)
print(m)


# In[35]:


a_cov = np.cov(m)
print(a_cov)


# # Тема “Работа с данными в Pandas”

# ### Задание 1

# Импортируйте библиотеку Pandas и дайте ей псевдоним pd. Создайте датафрейм authors со столбцами author_id и author_name, в которых соответственно содержатся данные: [1, 2, 3] и ['Тургенев', 'Чехов', 'Островский'].
# Затем создайте датафрейм book cо столбцами author_id, book_title и price, в которых соответственно содержатся данные:  
# [1, 1, 1, 2, 2, 3, 3],
# ['Отцы и дети', 'Рудин', 'Дворянское гнездо', 'Толстый и тонкий', 'Дама с собачкой', 'Гроза', 'Таланты и поклонники'],
# [450, 300, 350, 500, 450, 370, 290].

# In[1]:


import pandas as pd


# In[2]:


a = {
    "author_id": [1, 2, 3],
    "author_name": ['Тургенев', 'Чехов', 'Островский']
}
authors = pd.DataFrame(a)
authors


# In[3]:


b = {
    "author_id": [1, 1, 1, 2, 2, 3, 3],
    "book_title": ['Отцы и дети', 'Рудин', 'Дворянское гнездо', 'Толстый и тонкий', 'Дама с собачкой', 'Гроза', 'Таланты и поклонники'],
    "price": [450, 300, 350, 500, 450, 370, 290]
}
book = pd.DataFrame(b)
book


# ### Задание 2

# Получите датафрейм authors_price, соединив датафреймы authors и books по полю author_id.

# In[4]:


authors_price = pd.merge(authors, book, on='author_id', how='outer')
authors_price


# ### Задание 3

# Создайте датафрейм top5, в котором содержатся строки из authors_price с пятью самыми дорогими книгами.

# In[5]:


top5 = authors_price.nlargest(5, "price")
top5


# ### Задание 4

# Создайте датафрейм authors_stat на основе информации из authors_price. В датафрейме authors_stat должны быть четыре столбца:
# author_name, min_price, max_price и mean_price,
# в которых должны содержаться соответственно имя автора, минимальная, максимальная и средняя цена на книги этого автора.

# In[9]:


authors_price["price_min"] = authors_price["price"]
authors_price["price_max"] = authors_price["price"]
authors_price["price_mean"] = authors_price["price"]
groupby = authors_price.groupby("author_name")
authors_stat = groupby.agg({"price_min": "min", "price_max": "max", "price_mean": "mean"})
authors_stat


# ### Задание 5**

# Создайте новый столбец в датафрейме authors_price под названием cover, в нем будут располагаться данные о том, какая обложка у данной книги - твердая или мягкая. В этот столбец поместите данные из следующего списка:
# ['твердая', 'мягкая', 'мягкая', 'твердая', 'твердая', 'мягкая', 'мягкая'].
# Просмотрите документацию по функции pd.pivot_table с помощью вопросительного знака.Для каждого автора посчитайте суммарную стоимость книг в твердой и мягкой обложке. Используйте для этого функцию pd.pivot_table. При этом столбцы должны называться "твердая" и "мягкая", а индексами должны быть фамилии авторов. Пропущенные значения стоимостей заполните нулями, при необходимости загрузите библиотеку Numpy.
# Назовите полученный датасет book_info и сохраните его в формат pickle под названием "book_info.pkl". Затем загрузите из этого файла датафрейм и назовите его book_info2. Удостоверьтесь, что датафреймы book_info и book_info2 идентичны.

# In[11]:


authors_price["cover"] = ['твердая', 'мягкая', 'мягкая', 'твердая', 'твердая', 'мягкая', 'мягкая']
authors_price


# In[12]:


get_ipython().run_line_magic('pinfo', 'pd.pivot_table')


# In[14]:


import numpy as np


# In[18]:


book_info = pd.pivot_table(authors_price, values='price', index=['author_name'], columns=['cover'], aggfunc=np.sum)
book_info


# In[23]:


book_info.to_pickle("book_info.pkl")


# In[25]:


book_info2 = pd.read_pickle("book_info.pkl")
book_info2

